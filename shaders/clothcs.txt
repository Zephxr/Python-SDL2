#version 430

layout(local_size_x=64,local_size_y=1,local_size_z=1) in;
layout(binding=0,rgba32f) uniform image2DArray data;

#define SQRT2 1.4142135623730951

vec3 getForce( vec3 p, ivec3 coord, int deltaX, int deltaY, float restLength)
{
    ivec3 c2 = ivec3(coord.x+deltaX,coord.y+deltaY, clothCurrentSlice); 
    if( any(lessThan(c2.xy,ivec2(0))) )
        return vec3(0.0);
    if( any(greaterThanEqual(c2.xy,ivec2(clothN))) )
        return vec3(0.0);
    vec3 q = imageLoad( data, c2 ).xyz;
    vec3 vec = q-p;
    float veclen = length(vec);
    float lengthDiff = veclen - restLength;
    vec3 F = lengthDiff * clothSpringK * vec/veclen;
    return F;
}

void handleCollision( vec3 oldP, inout vec3 newP, inout vec3 newVel ){
    vec3 newP_worldspace = (vec4(newP,1.0) * worldMatrix).xyz;
    if( newP_worldspace.y - clothSphere.y < .1 && newP_worldspace.x > 11.05 && newP_worldspace.x < 14.15 && newP_worldspace.z > -3.6 && newP_worldspace.z < 1.1 ) {
        newP = oldP;
        newVel = vec3(0);
    }
}

void main(){
    ivec3 coord = ivec3(gl_GlobalInvocationID.xy,
                        clothCurrentSlice);
                        
    if( clothInitialize != 0 ){
        imageStore( data, ivec3(coord.xy,0), vec4(coord.x,0,coord.y,1) );
        imageStore( data, ivec3(coord.xy,1), vec4(coord.x,0,coord.y,1) );
        imageStore( data, ivec3(coord.xy,2), vec4(0,0,0,1) );
        imageStore( data, ivec3(coord.xy,3), vec4(0,0,0,1) );
        return;
    }
    
        
    //new position, velocity
    vec3 newP, newVel;
    //current position, velocity
    vec3 currP, currVel;
    
    currP = imageLoad( data, coord ).xyz;
    currVel = imageLoad( data, coord + ivec3(0,0,2) ).xyz;
    vec3 totalForce = vec3(0);
  
    totalForce += clothMass * clothGravity;
    totalForce += clothMass * clothWind;
    
    //getForce( position, deltax, deltay, restLength )
    totalForce += getForce( currP, coord,  0,-1,  1 );
    totalForce += getForce( currP, coord,  0, 1,  1 );
    totalForce += getForce( currP, coord, -1, 0,  1 );
    totalForce += getForce( currP, coord,  1, 0,  1 );
    
    totalForce += getForce( currP, coord,  1, 1, SQRT2 );
    totalForce += getForce( currP, coord,  1,-1, SQRT2 );
    totalForce += getForce( currP, coord, -1,-1, SQRT2 );
    totalForce += getForce( currP, coord, -1, 1, SQRT2 );
      
    totalForce += -clothDamping * currVel;

    vec3 acceleration = 1.0/clothMass * totalForce;
    newP = 0.5 * acceleration * clothTime * clothTime + 
                currVel * clothTime + 
                currP;
    newVel = acceleration * clothTime + currVel;
 
 
    //~ if( coord.y == 0 ){
        //~ newP = currP;
        //~ newVel = vec3(0);
    //~ }
 
    handleCollision( currP, newP, newVel );
    
    coord.z = 1-coord.z;
    
    imageStore( data,  coord, vec4(newP, 1.0) );
    imageStore( data,  coord+ivec3(0,0,2), vec4(newVel,0.0) );

}

